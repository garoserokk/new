#include <iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
vector<vector<int>>root(200002);
int used[200002];
int N, M, K, P;
queue<int> q;
priority_queue<int,vector<int>,greater<int>>pq;
void bfs(int now) {
	q.push(now);
	used[now] = 1;
	int cnt = 0;
	while(!q.empty()){
		if (cnt >= K)break;
		int size = q.size();
		for (int j = 0; j < size; j++) {
			int front = q.front();
			q.pop();

			for (int i = 0; i < root[front].size(); i++) {
				int next = root[front][i];
				if (used[next] == 1)continue;
				q.push(next);
				used[next] = 1;

			}
		}
		cnt++;
		


	}

	if (q.empty()) {
		cout << -1;
	}
	while (!q.empty()) {
		pq.push(q.front());
		q.pop();
	}

	while (!pq.empty()) {
		cout << pq.top() <<"\n";
		pq.pop();
	}

}
int main() {

	//freopen_s(new FILE*, "input.txt", "r", stdin);
	ios_base::sync_with_stdio(false);
	cin.tie();
	cout.tie();

	cin >> N >> M >> K >> P;

	for (int i = 0; i < M; i++) {
		int start, end;
		cin >> start >> end;
		root[start].push_back(end);
	}

	bfs(P);


}
